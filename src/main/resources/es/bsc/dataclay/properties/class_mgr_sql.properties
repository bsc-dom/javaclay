CREATE_TABLE_ACCESSED_IMPL = CREATE TABLE IF NOT EXISTS accessedimpl (id uuid PRIMARY KEY NOT NULL, namespace varchar NOT NULL, \
className varchar NOT NULL, opSignature varchar NOT NULL, position int NOT NULL, implid uuid NOT NULL);
CREATE_TABLE_ACCESSED_PROP = CREATE TABLE IF NOT EXISTS accessedprop (id uuid PRIMARY KEY NOT NULL, namespace varchar NOT NULL, \
className varchar NOT NULL, name varchar NOT NULL, propid uuid NOT NULL);
CREATE_TABLE_TYPE = CREATE TABLE IF NOT EXISTS type (id uuid PRIMARY KEY NOT NULL, \
descriptor varchar, signature varchar, typeName varchar, includes text, \
namespace varchar, classID uuid, \
extendedtypes text, extensions text);
CREATE_TABLE_JAVA_TYPE = CREATE TABLE IF NOT EXISTS java_type (id uuid PRIMARY KEY NOT NULL);
CREATE_TABLE_PYTHON_TYPE = CREATE TABLE IF NOT EXISTS python_type (id uuid PRIMARY KEY NOT NULL, \
signature varchar);
CREATE_TABLE_MEMORY_FEATURE = CREATE TABLE IF NOT EXISTS memoryfeature (id uuid PRIMARY KEY NOT NULL, \
capacityInMB int NOT NULL);
CREATE_TABLE_CPU_FEATURE = CREATE TABLE IF NOT EXISTS cpufeature (id uuid PRIMARY KEY NOT NULL, \
amount int NOT NULL);
CREATE_TABLE_LANGUAGE_FEATURE = CREATE TABLE IF NOT EXISTS langfeature (id uuid PRIMARY KEY NOT NULL, \
languageName varchar NOT NULL, version varchar NOT NULL);
CREATE_TABLE_ARCH_FEATURE = CREATE TABLE IF NOT EXISTS archfeature (id uuid PRIMARY KEY NOT NULL, \
architectureName varchar NOT NULL);
CREATE_TABLE_PREFETCHING_INFO = CREATE TABLE IF NOT EXISTS prefetchinginfo (id uuid PRIMARY KEY NOT NULL, \
disableDynamicPrefetching boolean, injectPrefetchingCall boolean, \
prefetchingNamespace varchar, prefetchingClassName varchar, \
prefetchingMethodSignature varchar, implID uuid, classID uuid, propertiesToPrefetch text);
CREATE_TABLE_JAVA_IMPLEMENTATION = CREATE TABLE IF NOT EXISTS java_implementation (id uuid PRIMARY KEY NOT NULL, \
responsibleaccountname varchar, namespace varchar NOT NULL, \
className varchar NOT NULL, opNameAndDescriptor varchar, position int NOT NULL, \
includes text, accessedProperties text, accessedImplementations text, \
featurestypes text, reqfeatures text, \
operationID uuid NOT NULL, metaClassID uuid NOT NULL, responsibleAccountID uuid NOT NULL, \
namespaceID uuid NOT NULL, prefetchingInfo uuid);
CREATE_TABLE_PYTHON_IMPLEMENTATION = CREATE TABLE IF NOT EXISTS python_implementation (id uuid PRIMARY KEY NOT NULL, \
responsibleaccountname varchar, namespace varchar NOT NULL, \
className varchar NOT NULL, opNameAndDescriptor varchar, position int NOT NULL, \
includes text, accessedProperties text, accessedImplementations text, \
featurestypes text, reqfeatures text, \
operationID uuid NOT NULL, metaClassID uuid NOT NULL, responsibleAccountID uuid NOT NULL, \
namespaceID uuid NOT NULL, prefetchingInfo uuid, code varchar);
CREATE_TABLE_ANNOTATION = CREATE TABLE IF NOT EXISTS annotation (id uuid PRIMARY KEY NOT NULL, descr varchar, \
keys text, _values text);
CREATE_TABLE_PROPERTY = CREATE TABLE IF NOT EXISTS property (id uuid PRIMARY KEY NOT NULL, \
namespace varchar NOT NULL, className varchar NOT NULL, name varchar NOT NULL, \
position INT NOT NULL, type uuid NOT NULL, getterOperationID uuid, \
getterImplementationID uuid, setterOperationID uuid, setterImplementationID uuid, \
namespaceID uuid NOT NULL, metaClassID uuid NOT NULL, \
extendedtypes text, extensions text, annotations text, updateImplementationID uuid, updateOperationID uuid, beforeUpdate varchar, afterUpdate varchar, inMaster boolean);
CREATE_TABLE_JAVA_PROPERTY = CREATE TABLE IF NOT EXISTS java_property (id uuid PRIMARY KEY NOT NULL, \
modifier int);
CREATE_TABLE_PYTHON_PROPERTY = CREATE TABLE IF NOT EXISTS python_property (id uuid PRIMARY KEY NOT NULL);
CREATE_TABLE_OPERATION = CREATE TABLE IF NOT EXISTS operation (id uuid PRIMARY KEY NOT NULL, \
namespace varchar NOT NULL, className varchar NOT NULL, descriptor varchar NOT NULL, \
signature varchar, name varchar NOT NULL, nameAndDescriptor varchar NOT NULL, \
paramsNames text, paramsTypes text, paramOrder text, returnType uuid, \
implementations text, isAbstract boolean, isStaticConstructor boolean, \
metaClassID uuid NOT NULL, namespaceID uuid NOT NULL, \
extendedtypes text, extensions text);
CREATE_TABLE_JAVA_OPERATION = CREATE TABLE IF NOT EXISTS java_operation (id uuid PRIMARY KEY NOT NULL, \
modifier int);
CREATE_TABLE_PYTHON_OPERATION = CREATE TABLE IF NOT EXISTS python_operation (id uuid PRIMARY KEY NOT NULL);
CREATE_TABLE_METACLASS = CREATE TABLE IF NOT EXISTS metaclass (id uuid PRIMARY KEY NOT NULL, \
namespace varchar NOT NULL, name varchar NOT NULL, parentType uuid, \
properties text, operations text, isAbstract boolean, \
namespaceID uuid, extendedtypes text, extensions text);
CREATE_TABLE_JAVA_METACLASS = CREATE TABLE IF NOT EXISTS java_metaclass (id uuid PRIMARY KEY NOT NULL, \
signature varchar, javaParentInterfaces text, \
classByteCode bytea, modifier int);
CREATE_TABLE_PYTHON_METACLASS = CREATE TABLE IF NOT EXISTS python_metaclass (id uuid PRIMARY KEY NOT NULL, \
importx text);
DROP_TABLE_ACCESSED_IMPL = DROP TABLE IF EXISTS accessedimpl;
DROP_TABLE_ACCESSED_PROP = DROP TABLE IF EXISTS accessedprop;
DROP_TABLE_TYPE = DROP TABLE IF EXISTS type;
DROP_TABLE_JAVA_TYPE = DROP TABLE IF EXISTS java_type;
DROP_TABLE_PYTHON_TYPE = DROP TABLE IF EXISTS python_type;
DROP_TABLE_MEMORY_FEATURE = DROP TABLE IF EXISTS memoryfeature;
DROP_TABLE_CPU_FEATURE = DROP TABLE IF EXISTS cpufeature;
DROP_TABLE_LANGUAGE_FEATURE = DROP TABLE IF EXISTS langfeature;
DROP_TABLE_ARCH_FEATURE = DROP TABLE IF EXISTS archfeature;
DROP_TABLE_PREFETCHING_INFO = DROP TABLE IF EXISTS prefetchinginfo;
DROP_TABLE_JAVA_IMPLEMENTATION = DROP TABLE IF EXISTS java_implementation;
DROP_TABLE_PYTHON_IMPLEMENTATION = DROP TABLE IF EXISTS python_implementation;
DROP_TABLE_JAVA_PROPERTY = DROP TABLE IF EXISTS java_property;
DROP_TABLE_PYTHON_PROPERTY = DROP TABLE IF EXISTS python_property;
DROP_TABLE_ANNOTATION = DROP TABLE IF EXISTS annotation;
DROP_TABLE_PROPERTY = DROP TABLE IF EXISTS property;
DROP_TABLE_JAVA_OPERATION = DROP TABLE IF EXISTS java_operation;
DROP_TABLE_PYTHON_OPERATION = DROP TABLE IF EXISTS python_operation;
DROP_TABLE_OPERATION = DROP TABLE IF EXISTS operation;
DROP_TABLE_JAVA_METACLASS = DROP TABLE IF EXISTS java_metaclass;
DROP_TABLE_PYTHON_METACLASS = DROP TABLE IF EXISTS python_metaclass;
DROP_TABLE_METACLASS = DROP TABLE IF EXISTS metaclass;
INSERT_ACCESSED_IMPL = INSERT INTO accessedimpl VALUES (?, ?, ?, ?, ?, ?);
INSERT_ACCESSED_PROP = INSERT INTO accessedprop VALUES (?, ?, ?, ?, ?);
INSERT_TYPE = INSERT INTO type VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT_JAVA_TYPE = INSERT INTO java_type VALUES (?);
INSERT_PYTHON_TYPE = INSERT INTO python_type VALUES (?, ?);
INSERT_MEMORY_FEATURE = INSERT INTO memoryfeature VALUES (?, ?);
INSERT_CPU_FEATURE = INSERT INTO cpufeature VALUES (?, ?);
INSERT_LANGUAGE_FEATURE = INSERT INTO langfeature VALUES (?, ?, ?);
INSERT_ARCH_FEATURE = INSERT INTO archfeature VALUES (?, ?);
INSERT_PREFETCHING_INFO = INSERT INTO prefetchinginfo VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT_JAVA_IMPLEMENTATION = INSERT INTO java_implementation VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT_PYTHON_IMPLEMENTATION = INSERT INTO python_implementation VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT_ANNOTATION = INSERT INTO annotation VALUES (?, ?, ?, ?);
INSERT_PROPERTY = INSERT INTO property VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT_JAVA_PROPERTY = INSERT INTO java_property VALUES (?, ?);
INSERT_PYTHON_PROPERTY = INSERT INTO python_property VALUES (?);
INSERT_OPERATION = INSERT INTO operation VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT_JAVA_OPERATION = INSERT INTO java_operation VALUES (?, ?);
INSERT_PYTHON_OPERATION = INSERT INTO python_operation VALUES (?);
INSERT_METACLASS = INSERT INTO metaclass VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT_JAVA_METACLASS = INSERT INTO java_metaclass VALUES (?, ?, ?, ?);
INSERT_PYTHON_METACLASS = INSERT INTO python_metaclass VALUES (?, ?);
SELECT_TYPE_BY_ID = SELECT * FROM type WHERE id = ?;
SELECT_JAVA_TYPE_BY_ID = SELECT * FROM java_type WHERE id = ?;
SELECT_PYTHON_TYPE_BY_ID = SELECT * FROM python_type WHERE id = ?;
SELECT_ACCESSED_PROP_BY_ID = SELECT * FROM accessedprop WHERE id = ?;
SELECT_ACCESSED_IMPL_BY_ID = SELECT * FROM accessedimpl WHERE id = ?;
SELECT_MEMORY_FEATURE_BY_ID = SELECT * FROM memoryfeature WHERE id = ?;
SELECT_CPU_FEATURE_BY_ID = SELECT * FROM cpufeature WHERE id = ?;
SELECT_LANGUAGE_FEATURE_BY_ID = SELECT * FROM langfeature WHERE id = ?;
SELECT_ARCH_FEATURE_BY_ID = SELECT * FROM langfeature WHERE id = ?;
SELECT_PREFETCHING_INFO_BY_ID = SELECT * FROM prefetchinginfo WHERE id = ?;
SELECT_JAVA_IMPLEMENTATION_BY_ID = SELECT * FROM java_implementation WHERE id = ?;
SELECT_PYTHON_IMPLEMENTATION_BY_ID = SELECT * FROM python_implementation WHERE id = ?;
SELECT_PYTHON_CODE_BY_IMPLEMENTATION_ID = SELECT code FROM python_implementation WHERE id = ?;
SELECT_ANNOTATION_BY_ID = SELECT * FROM annotation WHERE id = ?;
SELECT_PROPERTY_BY_ID = SELECT * FROM property WHERE id = ?;
SELECT_JAVA_PROPERTY_BY_ID = SELECT * FROM java_property WHERE id = ?;
SELECT_PYTHON_PROPERTY_BY_ID = SELECT * FROM python_property WHERE id = ?;
SELECT_OPERATION_BY_ID = SELECT * FROM operation WHERE id = ?;
SELECT_JAVA_OPERATION_BY_ID = SELECT * FROM java_operation WHERE id = ?;
SELECT_PYTHON_OPERATION_BY_ID = SELECT * FROM python_operation WHERE id = ?;
SELECT_METACLASS_BY_ID = SELECT * FROM metaclass WHERE id = ?;
SELECT_JAVA_METACLASS_BY_ID = SELECT * FROM java_metaclass WHERE id = ?;
SELECT_PYTHON_METACLASS_BY_ID = SELECT * FROM python_metaclass WHERE id = ?;
DELETE_TYPE_BY_ID = DELETE FROM type WHERE id = ?;
DELETE_JAVA_TYPE_BY_ID = DELETE FROM java_type WHERE id = ?;
DELETE_PYTHON_TYPE_BY_ID = DELETE FROM python_type WHERE id = ?;
DELETE_ACCESSED_PROP_BY_ID = DELETE FROM accessedprop WHERE id = ?;
DELETE_ACCESSED_IMPL_BY_ID = DELETE FROM accessedprop WHERE id = ?;
DELETE_MEMORY_FEATURE_BY_ID = DELETE FROM memoryfeature WHERE id = ?;
DELETE_CPU_FEATURE_BY_ID = DELETE FROM cpufeature WHERE id = ?;
DELETE_LANGUAGE_FEATURE_BY_ID = DELETE FROM langfeature WHERE id = ?;
DELETE_ARCH_FEATURE_BY_ID = DELETE FROM langfeature WHERE id = ?;
DELETE_PREFETCHING_INFO_BY_ID = DELETE FROM prefetchinginfo WHERE id = ?;
DELETE_IMPLEMENTATION_BY_ID = DELETE FROM implementation WHERE id = ?;
DELETE_JAVA_IMPLEMENTATION_BY_ID = DELETE FROM java_implementation WHERE id = ?;
DELETE_PYTHON_IMPLEMENTATION_BY_ID = DELETE FROM implementation WHERE id = ?;
DELETE_ANNOTATION_BY_ID = DELETE FROM annotation WHERE id = ?;
DELETE_PROPERTY_BY_ID = DELETE FROM property WHERE id = ?;
DELETE_JAVA_PROPERTY_BY_ID = DELETE FROM java_property WHERE id = ?;
DELETE_PYTHON_PROPERTY_BY_ID = DELETE FROM python_property WHERE id = ?;
DELETE_OPERATION_BY_ID = DELETE FROM operation WHERE id = ?;
DELETE_JAVA_OPERATION_BY_ID = DELETE FROM java_operation WHERE id = ?;
DELETE_PYTHON_OPERATION_BY_ID = DELETE FROM python_operation WHERE id = ?;
DELETE_METACLASS_BY_ID = DELETE FROM metaclass WHERE id = ?;
DELETE_JAVA_METACLASS_BY_ID = DELETE FROM java_metaclass WHERE id = ?;
DELETE_PYTHON_METACLASS_BY_ID = DELETE FROM python_metaclass WHERE id = ?;
UPDATE_JAVA_CLASS_BYTECODE_BY_ID = UPDATE java_metaclass SET classByteCode = ? WHERE id = ?;
EXISTS_CLASS_IN_NAMESPACE = SELECT EXISTS (SELECT 1 FROM metaclass WHERE namespaceID = ?);
UPDATE_CLASS_ADD_PROPERTY_BY_ID = UPDATE metaclass SET properties = properties || ? || CHR(1), operations = operations || ? || CHR(1) || ? || CHR(1) || ? || CHR(1) WHERE id = ?;
UPDATE_CLASS_ADD_OPERATION_BY_ID = UPDATE metaclass SET operations = operations || ? || CHR(1) WHERE id = ?;
UPDATE_CLASS_REMOVE_OPERATION_BY_ID = UPDATE metaclass SET operations = replace(operations, ? || CHR(1), '') WHERE id = ?;
UPDATE_OPERATION_ADD_IMPLEMENTATION_BY_ID = UPDATE operation SET implementations = implementations || ? || CHR(1) WHERE id = ?;
UPDATE_OPERATION_REMOVE_IMPLEMENTATION_BY_ID = UPDATE operation SET implementations = replace(implementations, ? || CHR(1), '') WHERE id = ?;
SELECT_CLASS_BY_NAME_AND_NAMESPACEID = SELECT * FROM metaclass WHERE name = ? AND namespaceID = ?;
SELECT_CLASS_BY_NAME_AND_NAMESPACE = SELECT * FROM metaclass WHERE name = ? AND namespace = ?;
SELECT_PROPERTY_BY_NAMES = SELECT * FROM property WHERE name = ? AND className = ? AND namespace = ?;
SELECT_OPERATION_BY_NAMES = SELECT * FROM operation WHERE signature = ? AND className = ? AND namespace = ?;
SELECT_CLASS_BY_NAME = SELECT * FROM metaclass WHERE name = ?;
EXISTS_TYPE_CLASS_ID = SELECT EXISTS (SELECT 1 FROM type WHERE classID = ?);
EXISTS_ACCESSED_IMPLEMENTATION_ID = SELECT EXISTS (SELECT 1 FROM accessedimpl WHERE implid = ?);
SELECT_PROPERTY_OF_ENRICHMENT = SELECT * FROM property WHERE metaClassID = ? AND namespaceID = ?;
SELECT_OPERATION_OF_ENRICHMENT = SELECT * FROM operation WHERE metaClassID = ? AND namespaceID = ?;
SELECT_CLASSES_IN_NAMESPACE = SELECT * FROM metaclass WHERE namespaceID = ?;

SELECT_CLASSID_BY_NAME_AND_NAMESPACEID = SELECT id FROM metaclass WHERE name = ? AND namespaceID = ?;

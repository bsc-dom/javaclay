CREATE_TABLE_LOGICMODULE = CREATE TABLE IF NOT EXISTS logicmodule (dataclayinstanceid uuid PRIMARY KEY NOT NULL, \
adminid uuid NOT NULL, registratorid uuid, publicnamespaceid uuid, publiccontractid uuid);
DROP_TABLE_LOGICMODULE = DROP TABLE IF EXISTS logicmodule;
INSERT_LOGICMODULE = INSERT INTO logicmodule VALUES (?, ?, ?, ?, ?);
EXISTS_LOGICMODULE_BY_ID = SELECT EXISTS (SELECT 1 FROM logicmodule);
SELECT_LOGICMODULE = SELECT * FROM logicmodule;

# Storage locations and execution environments
CREATE_TABLE_STORAGE_LOCATIONS = CREATE TABLE IF NOT EXISTS storagelocations (id uuid PRIMARY KEY NOT NULL, \
hostname varchar NOT NULL, name varchar NOT NULL, port int NOT NULL);
CREATE_TABLE_EXECUTION_ENVIRONMENTS = CREATE TABLE IF NOT EXISTS executionenvironments (id uuid PRIMARY KEY NOT NULL, \
hostname varchar NOT NULL, name varchar NOT NULL, lang int NOT NULL, port int NOT NULL, dataClayInstanceID uuid NOT NULL);
CREATE_TABLE_DATACLAYS = CREATE TABLE IF NOT EXISTS dataclays (id uuid NOT NULL, \
hostname varchar NOT NULL, port int NOT NULL, CONSTRAINT PK_dataclays PRIMARY KEY(id, hostname, port));
DROP_TABLE_DATACLAYS = DROP TABLE IF EXISTS dataclays;
DROP_TABLE_STORAGE_LOCATIONS = DROP TABLE IF EXISTS storagelocations;
DROP_TABLE_EXECUTION_ENVIRONMENTS = DROP TABLE IF EXISTS executionenvironments;


INSERT_STORAGE_LOCATION = INSERT INTO storagelocations VALUES (?, ?, ?, ?);
INSERT_EXECUTION_ENVIRONMENT = INSERT INTO executionenvironments VALUES (?, ?, ?, ?, ?, ?);
SELECT_STORAGE_LOCATION = SELECT * FROM storagelocations WHERE id = ?;
SELECT_EXECUTION_ENVIRONMENT = SELECT * FROM executionenvironments WHERE id = ?; 
EXISTS_STORAGE_LOCATION_BY_ID = SELECT EXISTS (SELECT 1 FROM storagelocations WHERE id = ?);
EXISTS_EXECUTION_ENVIRONMENT_BY_ID = SELECT EXISTS (SELECT 1 FROM executionenvironments WHERE id = ?);
EXISTS_STLOC_BY_NAMES = SELECT EXISTS (SELECT 1 FROM storagelocations WHERE name = ? AND hostname = ?);
EXISTS_EXECUTION_ENVIRONMENT_BY_HOSTPORT = SELECT EXISTS ( SELECT 1 FROM executionenvironments WHERE hostname = ? AND port = ?);
EXISTS_STORAGE_LOCATION_BY_HOSTPORT = SELECT EXISTS ( SELECT 1 FROM storagelocations WHERE hostname = ? AND port = ?);
DELETE_STORAGE_LOCATION = DELETE FROM storagelocations WHERE id = ?;
DELETE_EXECUTION_ENVIRONMENT = DELETE FROM executionenvironments WHERE id = ?;
SELECT_ALL_LOCS = SELECT * FROM storagelocations;
SELECT_ALL_EXECENVS = SELECT * FROM executionenvironments;
SELECT_STLOC_BY_NAME = SELECT * FROM storagelocations WHERE name = ?;
SELECT_EXECENV_BY_NAME_LANG = SELECT * FROM executionenvironments WHERE name = ? AND lang = ?;
SELECT_EXECENV_BY_HOSTNAME_AND_PORT = SELECT * FROM executionenvironments WHERE hostname = ? AND port = ?;
SELECT_ALL_EXECENVS_BY_LANG = SELECT * FROM executionenvironments WHERE lang = ?;
SELECT_ALL_EXECENV_BY_HOSTNAME_AND_LANG = SELECT id FROM executionenvironments WHERE hostname = ? AND lang = ?; 
UPDATE_STORAGE_LOCATION = UPDATE storagelocations SET hostname = ?, port = ? WHERE id = ?; 
UPDATE_EXECUTION_ENVIRONMENT = UPDATE executionenvironments SET hostname = ?, port = ? WHERE id = ?; 

INSERT_DATACLAY_INFO = INSERT INTO dataclays VALUES (?, ?, ?);
SELECT_DATACLAY_INFO_BY_ID = SELECT * FROM dataclays WHERE id = ?;
SELECT_DATACLAY_ID_FROM_HOST_PORT = SELECT id FROM dataclays WHERE hostname = ? AND port = ?;
DELETE_DATACLAY = DELETE FROM dataclays WHERE hostname = ? AND port = ?;
SELECT_ALL_DATACLAYS = SELECT id FROM dataclays;

VACUUM = VACUUM;
CREATE_TABLE_METADATA = CREATE TABLE IF NOT EXISTS objectMD (oid UUID PRIMARY KEY NOT NULL, classid UUID NOT NULL, \
datasetid UUID NOT NULL, stlocs varchar NOT NULL, isreadonly boolean, alias varchar, language int, accountid uuid);
CREATE_TABLE_STORAGE_LOCATIONS = CREATE TABLE IF NOT EXISTS storagelocations (id uuid PRIMARY KEY NOT NULL, \
hostname varchar NOT NULL, name varchar NOT NULL, port int NOT NULL);
CREATE_TABLE_EXECUTION_ENVIRONMENTS = CREATE TABLE IF NOT EXISTS executionenvironments (id uuid PRIMARY KEY NOT NULL, \
hostname varchar NOT NULL, name varchar NOT NULL, lang int NOT NULL, port int NOT NULL, dataClayInstanceID uuid NOT NULL);
DROP_TABLE_METADATA = DROP TABLE IF EXISTS objectMD;
DROP_TABLE_STORAGE_LOCATIONS = DROP TABLE IF EXISTS storagelocations;
DROP_TABLE_EXECUTION_ENVIRONMENTS = DROP TABLE IF EXISTS executionenvironments;

INSERT_METADATA = INSERT INTO objectMD VALUES (?, ?, ?, ?, ?, ?, ?, ?);
DELETE_METADATA = DELETE FROM objectMD WHERE oid = ?;
SELECT_METADATA = SELECT * FROM objectMD WHERE oid = ?;
SELECT_ALL_OIDS = SELECT oid FROM objectMD;
EXISTS_METADATA_BY_ID = SELECT EXISTS (SELECT 1 FROM objectMD WHERE oid = ?);
EXISTS_METADATA_BY_DATASETID = SELECT EXISTS (SELECT 1 FROM objectMD WHERE datasetid = ?);
SELECT_METADATA_FOR_CLASS = SELECT * FROM objectMD WHERE classid = ?;
SELECT_METADATA_BY_ALIAS = SELECT * FROM objectMD WHERE alias == ?;

UPDATE_ALIAS_METADATA = UPDATE objectMD SET alias = ? WHERE oid = ?; 
UPDATE_DATASETID_METADATA = UPDATE objectMD SET datasetid = ? WHERE oid = ?;
UPDATE_READONLY_METADATA = UPDATE objectMD SET isreadonly = ? WHERE oid = ?; 
UPDATE_LOCS_METADATA = UPDATE objectMD SET stlocs = ? WHERE oid = ?;
UPDATE_FOR_REPLICA_METADATA = UPDATE objectMD SET stlocs = ?, isreadonly = ? WHERE oid = ?; 

INSERT_STORAGE_LOCATION = INSERT INTO storagelocations VALUES (?, ?, ?, ?);
INSERT_EXECUTION_ENVIRONMENT = INSERT INTO executionenvironments VALUES (?, ?, ?, ?, ?, ?);
SELECT_STORAGE_LOCATION = SELECT * FROM storagelocations WHERE id = ?;
SELECT_EXECUTION_ENVIRONMENT = SELECT * FROM executionenvironments WHERE id = ?; 
EXISTS_STORAGE_LOCATION_BY_ID = SELECT EXISTS (SELECT 1 FROM storagelocations WHERE id = ?);
EXISTS_EXECUTION_ENVIRONMENT_BY_ID = SELECT EXISTS (SELECT 1 FROM executionenvironments WHERE id = ?);
EXISTS_STLOC_BY_NAMES = SELECT EXISTS (SELECT 1 FROM storagelocations WHERE name = ? AND hostname = ?);
EXISTS_EXECUTION_ENVIRONMENT_BY_HOSTPORT = SELECT EXISTS ( SELECT 1 FROM executionenvironments WHERE hostname = ? AND port = ?);
EXISTS_STORAGE_LOCATION_BY_HOSTPORT = SELECT EXISTS ( SELECT 1 FROM storagelocations WHERE hostname = ? AND port = ?);
DELETE_STORAGE_LOCATION = DELETE FROM storagelocations WHERE id = ?;
DELETE_EXECUTION_ENVIRONMENT = DELETE FROM executionenvironments WHERE id = ?;
SELECT_ALL_LOCS = SELECT * FROM storagelocations;
SELECT_ALL_EXECENVS = SELECT * FROM executionenvironments;
SELECT_STLOC_BY_NAME = SELECT * FROM storagelocations WHERE name = ?;
SELECT_EXECENV_BY_NAME_LANG = SELECT * FROM executionenvironments WHERE name = ? AND lang = ?;
SELECT_EXECENV_BY_HOSTNAME_AND_PORT = SELECT * FROM executionenvironments WHERE hostname = ? AND port = ?;
SELECT_ALL_EXECENVS_BY_LANG = SELECT * FROM executionenvironments WHERE lang = ?;
SELECT_ALL_EXECENV_BY_HOSTNAME_AND_LANG = SELECT id FROM executionenvironments WHERE hostname = ? AND lang = ?; 
UPDATE_STORAGE_LOCATION = UPDATE storagelocations SET hostname = ?, port = ? WHERE id = ?; 
UPDATE_EXECUTION_ENVIRONMENT = UPDATE executionenvironments SET hostname = ?, port = ? WHERE id = ?; 

CREATE_TABLE_DATACLAYS = CREATE TABLE IF NOT EXISTS dataclays (id uuid NOT NULL, \
hostname varchar NOT NULL, port int NOT NULL, CONSTRAINT PK_dataclays PRIMARY KEY(id, hostname, port));
CREATE_TABLE_FEDERATED_OBJECTS = CREATE TABLE IF NOT EXISTS federatedobjects (oid UUID NOT NULL, \
targetDataClayID UUID NOT NULL, CONSTRAINT PK_federatedobjects PRIMARY KEY (oid, targetDataClayID));
CREATE_TABLE_EXTERNAL_OBJECTS = CREATE TABLE IF NOT EXISTS externalobjects (oid UUID PRIMARY KEY NOT NULL, \
srcDataClayID UUID NOT NULL, unregistered boolean);
DROP_TABLE_DATACLAYS = DROP TABLE IF EXISTS dataclays;
DROP_TABLE_FEDERATED_OBJECTS = DROP TABLE IF EXISTS federatedobjects;
DROP_TABLE_EXTERNAL_OBJECTS = DROP TABLE IF EXISTS externalobjects;

INSERT_DATACLAY_INFO = INSERT INTO dataclays VALUES (?, ?, ?);
SELECT_DATACLAY_INFO_BY_ID = SELECT * FROM dataclays WHERE id = ?;
SELECT_DATACLAY_ID_FROM_HOST_PORT = SELECT id FROM dataclays WHERE hostname = ? AND port = ?;
DELETE_DATACLAY = DELETE FROM dataclays WHERE hostname = ? AND port = ?;
SELECT_ALL_DATACLAYS = SELECT id FROM dataclays;

INSERT_FEDERATED_OBJECT = INSERT INTO federatedobjects VALUES (?, ?);
DELETE_FEDERATED_OBJECT = DELETE FROM federatedobjects WHERE oid = ? AND targetDataClayID = ?;
EXISTS_FEDERATED_OBJECT = SELECT EXISTS (SELECT 1 FROM federatedobjects WHERE oid = ?);
EXISTS_FEDERATED_OBJECT_WITH_DC = SELECT EXISTS (SELECT 1 FROM federatedobjects WHERE oid = ? AND targetDataClayID = ?);
SELECT_TARGET_DATACLAYS_FEDERATED_OBJECT = SELECT * FROM federatedobjects WHERE oid = ?;
SELECT_OBJECTS_FEDERATED_WITH_DATACLAY = SELECT oid FROM federatedobjects WHERE targetDataClayID = ? UNION SELECT oid from externalobjects WHERE srcDataClayID = ? AND unregistered = ?;

INSERT_EXTERNAL_OBJECT = INSERT INTO externalobjects VALUES (?, ?, ?);
DELETE_EXTERNAL_OBJECT = DELETE FROM externalobjects WHERE oid = ?;
EXISTS_EXTERNAL_OBJECT = SELECT EXISTS (SELECT 1 FROM externalobjects WHERE oid = ? AND unregistered = ?);
SELECT_SOURCE_DATACLAY_EXTERNAL_OBJECT = SELECT * FROM externalobjects WHERE oid = ?;
SELECT_UNREGISTERED_EXTERNAL_OBJECTS = SELECT * FROM externalobjects WHERE unregistered = ?;
UPDATE_UNREGISTER_EXTERNAL_OBJECT = UPDATE externalobjects SET unregistered = ? WHERE oid = ?; 
